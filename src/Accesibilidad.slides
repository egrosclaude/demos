<!-- INCLUDE src/Accesibilidad.header -->

<!------------------------>
<section data-background="img/background04.jpg" data-transition="fade-in fade-out" data-coursemod-shown="false" data-title="Herramientas Didácticas">
<div class="frosted">
</br>
	<h2>Herramientas Didácticas</h2>
	<h2>Accesibles</h2>
	<h2>con Software Libre</h2>
<hr>
Eduardo Grosclaude 2017
<hr>
</br>
</div>
<aside data-markdown class="notes">
</aside>
</section>
<!------------------------>
<!------------------------>
<section data-transition=fade-in fade-out">
<h2>Un poco de historia</h2>
<ul>
<li>Docencia en primer año de Lic. Cs. Computación</li>
	<ul>
	<li>Clase tradicional</li>
	<li>Presentaciones en PDF</li>
	<li>Estáticas</li>
	<li>Eficaces pero aburridas</li>
	<li>Posibilidades limitadas</li>
	<li>No reemplazan al libro</li>
	<li class="fragment">¡No reemplazan al libro!</li>
	</ul>
</ul>
<aside data-markdown class="notes">
</aside>
</section>



<!------------------------>
<section data-transition="fade-in slide-out">
<h2>Presentaciones</h2>
<ul>
	<li>Que sirvan a la vez para dar la clase y para estudiar</li>
	<li>Que no requieran editores ni visualizadores especiales</li>
	<li>Que no requieran componentes propietarios</li>
	<li>Que funcionen en cualquier plataforma, incluyendo móviles</li>
	<div class="fragment">
	<li>Que permitan insertar medios diversos</li>
		<ul>
		<li>Videos, audio</li>
		<li>Navegar la web</li>
		<li>Animaciones</li>
		<li>Actividades interactivas</li>
		</ul>
	</div>
</ul>
<aside data-markdown class="notes">
</aside>
</section>
<!------------------------>

<!------------------------>
<section data-transition="slide-in slide-out">
<h2>Reveal.js</h2>
<ul>
	<li>Framework hecho en HTML5 + Javascript</li>
	<li>Proyecto con vitalidad</li>
	<li><a href="http://github.com/hakimel/reveal.js" target="_blank"> https://github.com/hakimel/reveal.js</a></li>
	<li>Muchos plugins</li>
	<ul>
		<li>Pizarra, menú, audio, matemática</li>
	</ul>
</ul>
<img src="img/colab/blog-github.png" class="plain stretch"> 
<aside data-markdown class="notes">
</aside>
</section>
<!------------------------>


<section>
<h2>Representación sin signo SS(k)</h2>
<ul>
   <li><b>SS(k)</b> expresa sólo números <b>no negativos</b></li>
   <li>Simplemente usar $k$ dígitos binarios</li>
   <div class="fragment">
   <ol>
   <li>Con $k$ bits, tengo $2^k$ posibilidades: $2 \times 2 \times 2 ... = 2^k$</li>
   <li class="fragment">Con $k$ bits, el mayor número binario posible es 111111....1 = $\sum_{i=0}^k{2^i} = 2^k-1$</li>
   </ol>
   </div>
   <li class="fragment"> &rarr; Rango de representación <span class="post_it">$[0, 2^k-1]$</span></li>
   <div>
	<ul>
	   <li class="fragment">Con 4 bits: $[0, 2^4-1] = [0, 15]$</li>
	   <li class="fragment">Con 8 bits: $[0, 2^8-1] = [0, 255]$</li>
	   <li class="fragment">Con 32 bits: $[0, 2^{32}-1] = [0, 4.294.967.295]$</li>
	</ul>
   </div>
   <li><a href="Accesibilidad-notes.pdf">Notas de esta presentación</a></li>
</ul>
<aside data-markdown class="notes">
##Representación sin signo SS(k)

Consideremos primero qué ocurre cuando queremos representar números enteros **no negativos** (es decir, **positivos o cero**) sobre una cantidad fija de bits. 

En el sistema **sin signo**, simplemente usamos el sistema binario de numeración, tal como lo conocemos, **pero limitándonos a una cantidad fija** de dígitos binarios o bits. Podemos entonces abreviar el nombre de este sistema como **SS(k)**, donde $k$ es la cantidad fija de bits, o ancho, de cada número representado.

###Rango de representación de SS(k)

¿Cuál será el rango de representación? El **cero** puede representarse, así que el límite inferior del rango de representación será 0. Pero ¿cuál será el límite superior? Es decir, si la cantidad de dígitos binarios en este sistema es $k$, ¿cuál es el número más grande que podremos representar? 

Podemos estudiarlo de dos maneras.

**1. Usando combinatoria**

Contemos cuántos números diferentes podemos escribir con $k$ dígitos binarios. Imaginemos un número binario cualquiera con $k$ dígitos. El dígito de más a la derecha tiene únicamente dos posibilidades (0 o 1). Por cada una de éstas hay nuevamente dos posibilidades para el siguiente hacia la izquierda (lo que da las cuatro posibilidades 00, 01, 10, 11). Por cada una de éstas, hay dos posibilidades para el siguiente (dando las ocho posibilidades 000, 001, 010, 011, 100, 101, 110, 111), etc., y así hasta la posición $k$. No hay más posibilidades. Como hemos multiplicado 2 por sí mismo $k$ veces, la cantidad de números que se pueden escribir es $2^k$. Luego, el número más grande posible es $2^k - 1$. (**Pregunta**: ¿Por qué $2^k - 1$ y no $2^k$?).

**2. Usando álgebra**

El número más grande que podemos representar en un sistema sin signo a $k$ dígitos es, seguramente, aquel donde todos los $k$ dígitos valen **1**. La Expresión General que hemos visto nos dice que si un número $n$ está escrito en base 2, **con $k$ dígitos**, entonces 
$$n = x_{k-1}\times 2^{k-1} + ... + x_1\times2^1+x_0\times2^0$$ 
y, si queremos escribir el más grande de todos, deberán ser todos los $x_i$ iguales a 1. (**Pregunta**: ¿Por qué si el número $n$ tiene $k$ dígitos binarios, el índice del más significativo es $k-1$ y no $k$?)

Esta suma vale entonces 

$$ x_{k-1}\times 2^{k-1} + ... + x_1\times2^1+x_0\times2^0 = $$ 
$$  = 1\times 2^{k-1} + ... + 1\times2^1+1\times2^0 = $$ 
$$  = 2^{k-1} + ... + 2^1+2^0 = $$ 
$$  = 2^{k}-1 $$ 

Usando ambos argumentos hemos llegado a que el número más grande que podemos representar con $k$ dígitos binarios es $2^k-1$. Por lo tanto, **el rango de representación de un sistema sin signo a $k$ dígitos, o SS(k), es $[0, 2^k - 1]$**. Todos los números representables en esta clase de sistemas son **positivos o cero**.

**Ejemplos**

- Para un sistema de representación sin signo a 8 bits: $[0, 2^8-1] = [0, 255]$
- Con 16 bits: $[0, 2^{16}-1] = [0, 65.535]$
- Con 32 bits: $[0, 2^{32}-1] = [0, 4.294.967.295]$
</aside>
</section>


<!------------------------>

<section>
<h2>Microescenarios de aprendizaje</h2>
<ul>
<li>Animaciones, videos &rarr; rol pasivo</li>
<li>Modelos interactivos</li>
<div class="fragment">
<ul>
<li>Actividades de <i>what if</i></li>
<li>Seguir el curso de la motivación</li>
<li>Laboratorio virtual</li>
</ul>
</div>
</ul>
</section>


<section data-state="retardos" data-coursemod-shown="true" data-transition="convex-in convex-out">
<h2>Ancho de banda digital</h2>

<script src="src/bw/jquery-3.1.0.js"></script>
<script>
	$(document).ready(function () {
		
		var start = false;
		var mult = 1;
		
		var num1 = 0;
		var num2 = 0;
		
		var colr = false;
		
		var fin = 0;
		
		var isps = ["1Mbps","2Mbps","3Mbps","4Mbps"];
		
		function animar(index1, index2) {
		
			w1 = ($("#canal1").width() / 10);
			w2 = ($("#canal2").width() / (10 * mult));
			
			bkg = "";
			
			tnum1 = "";
			tnum2 = "";
			
			b1 = "background-color:none;-webkit-box-shadow:none;box-shadow:none;";
			b2 = "background-color:none;-webkit-box-shadow:none;box-shadow:none;";
			
			if(index1 > 0){
				tnum1 = num1;
				b1 = "background-color:red;-webkit-box-shadow: 0 0 0 1px #ccc;box-shadow: 0 0 0 1px #ccc;";
			}
		
			$("#canal1").prepend("<div class='pq1' style='width:"+w1+"px;"+b1+"'>"+tnum1+"</div>");
			index1--;
			num1++;
			
			for(i = 0; i < mult; i++){
				
				if(index2 > 0){
					tnum2 = num2;
					b2 = "background-color:green;-webkit-box-shadow: 0 0 0 1px #ccc;box-shadow: 0 0 0 1px #ccc;";
				}
				else {
					b2 = "background-color:none;-webkit-box-shadow:none;box-shadow:none;";
					tnum2 = "";
				}
			
				$("#canal2").prepend("<div class='pq2' style='width:"+w2+"px;"+b2+"'>"+tnum2+"</div>");
				index2--;
				num2++;
				colr = false;
				bkg = "";
			}
		
			if(start && num1 < fin){
	
				setTimeout(function () {
					
					animar(index1, index2);
					
				},500);
			
			}
			else{
				$("#start").removeAttr("disabled");
				$("#multadd").removeAttr("disabled");
				$("#multsub").removeAttr("disabled");
				start = false;
			}
			
		}
		
		$("#start").click(function () {
			
			if(!start){
			
				$(this).attr("disabled","true");
				$("#multadd").attr("disabled","true");
				$("#multsub").attr("disabled","true");
			
				start = true;			
			
				$("#canal1").html("");
				$("#canal2").html("");		
			
				num1 = 0;
				num2 = 0;
			
				cant = $("#cantPaq").val();
				
				fin = 10 + (cant * 1);
			
				animar(cant,cant);
				
			}
			
		});
		
		$("#multadd").click(function () {			
			
			if(mult < 4){
				mult++;		
			}
			
			$("#isp2").html(isps[mult - 1]);
			
		});
		
		$("#multsub").click(function () {
			
			if(mult > 1){
				mult--;			
			}
			
			$("#isp2").html(isps[mult - 1]);
			
		});
		
		$("#colorear").click(function () {
		
			colr = true;
			
		});
		
	});
</script>

<!--

	*{
		 box-sizing: border-box;
		 vertical-align: top;
	}

	body{
		width: 100%;
		margin: 0px;
		padding: 30px;
		text-align: center;
	}
-->
<style type="text/css">
	
	.isp{
		display: block;
		width: 100%;
		height: 40px;
		font-size: 15px;
		margin: auto;
	}

	#canal1{

		display: inline-block;
		width: 600px;
		height: 40px;
		margin-bottom: 12px;
		background-color: #ccc;
		position: relative;
		overflow-x: hidden;
		overflow-y: hidden;
		text-align: left;
	
	}
	
	#canal2{

		display: inline-block;
		width: 600px;
		height: 40px;
		margin-bottom: 12px;
		background-color: #ccc;
		position: relative;
		overflow-x: hidden;
		overflow-y: hidden;
		text-align: left;
	
	}
	
	.pq1{
		
		display: inline-block;
		background-color: none;
		height: 40px;
		position: relative;
		text-align: center;
		
	}
	
	.pq2{
		
		display: inline-block;
		background-color: none;
		height: 40px;
		position: relative;
		text-align: center;
		
	}
	
	.gabinete{
		display: inline-block;
		width: 8%;
	}
	
	#botonera{
		display: block;
	}

</style>
</br>
<div style="box-sizing: border-box; vertical-align: top; text-align: center;" class="stretch"> 
	<span id="isp1" class="isp">1Mbps</span>
	<img src="src/bw/gabinete.png" alt="gabinete.png" class="gabinete plain">
	<div id="canal1"></div>
	<img src="src/bw/gabinete.png" alt="gabinete.png" class="gabinete plain">

	<span id="isp2" class="isp">1Mbps</span>
	<img src="src/bw/gabinete.png" alt="gabinete.png" class="gabinete plain">
	<div id="canal2"></div>
	<img src="src/bw/gabinete.png" alt="gabinete.png" class="gabinete plain">
	
	<div id="botonera">
		<button id="start">Iniciar</button>
		<button id="multadd">+ 1Mbps</button>
		<button id="multsub">- 1Mbps</button>
		<input type="number" min="1" max="20" value="1" id="cantPaq" /><span style="font-size: 15px;"> paquetes</span>
	</div>
</br>
<small><i>Animación por Iván Eidelstein, Jorge L. Beroisa</i></small>
</div>
<aside data-markdown class="notes">
##Ancho de banda digital
La velocidad de transmisión de una interfaz a veces es llamada ancho de banda digital.

El **retardo de transmisión** depende de la velocidad de transmisión de la interfaz, mientras que el **retardo de propagación** es una función de la distancia que tiene que recorrer la señal por el medio.

Dos enlaces de la misma longitud tendrán aproximadamente el mismo retardo de propagación, sin importar el ancho de banda digital de las interfaces. 

* Cuando ambos enlaces transmitan a la vez, los bits emitidos al mismo tiempo llegarán al otro extremo del enlace en el mismo tiempo. 
* Sin embargo, cuando una de las interfaces tenga una velocidad de transmisión **mayor** que la otra, el **espacio** ocupado en el enlace por la señal que codifica cada bit será **menor** que la del otro enlace.
</aside>
</section>


<section>
<h2>SVG</h2>
<ul>
<li>Formato gráfico vectorial</li>
<li>Independiente de la resolución</li>
<li>Basado en XML</li>
<li>Se integra al DOM</li>
<ul>
<li>Editable</li>
<li>Indexable</li>
<li class="fragment">Las propiedades de los objetos son modificables</li>
<li class="fragment">Soporta animaciones</li>
<li class="fragment">APIs de programación</li>
<li class="fragment"><a href="http://snapsvg.io/">Snap.svg</a></li>
</ul>
</ul>
</section>

<section data-transition="fade-in fade-out">
<h2>Snap.svg</h2>
<div class="stretch plain" height="100%" width="100%">
<svg height="80" width="250" viewBox="0 0 300 300">
   <circle cx="150" cy="150" r="100" fill="#bada55" stroke="#000000" style="stroke-width: 5;"></circle>
   <g>
        <circle cx="100" cy="150" r="70"></circle>
        <circle cx="200" cy="150" r="70"></circle>
   </g>
</svg>
</object>
</section>

<section data-transition="fade-in fade-out">
<h2>Snap.svg</h2>
<pre class="stretch"><code>
<svg height="80" width="250" viewBox="0 0 300 270">
   <circle cx="150" cy="150" r="100" fill="#bada55" 
		stroke="#000000" 
		style="stroke-width: 5;"></circle>
   <g>
        <circle cx="100" cy="150" r="70"></circle>
        <circle cx="200" cy="150" r="70"></circle>
   </g>
</svg>
</code></pre>
</section>



<section data-transition="fade-in fade-out">
<h2>Snap.svg</h2>
<pre class="stretch"><code>
var s = Snap("#svg");
var bigCircle = s.circle(150, 150, 100);
bigCircle.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});
var smallCircle = s.circle(100, 150, 70);
var discs = s.group(smallCircle, s.circle(200, 150, 70));
</code></pre>
</section>


<section data-coursemod-shown="true">
<h2>Contando con los dedos</h2>
<div id="senarycontainer" class="snapsvg stretch" width="100%" height="100%">
	<svg id="senary" viewBox="0 0 400 200" width="100%" height="100%"></svg>
	<!-- {
		"initialize": "function(container, options) { 
			var svg = Snap('#senary');
			var conv = [], img = [], dig = [];
			var num = 0;
			var txtattr = { fontSize: '20', fontFamily: 'Helvetica', 
				textAnchor: 'middle', dominantBaseline: 'middle', 
				alignmentBaseline: 'middle'};
			var format = 'img/manos/mickey/{h}h{x}.svg';

			function debounce(func, wait, immediate) {
			  var timeout;
			  return function() {
			    var context = this,
			      args = arguments;
			    var later = function() {
			      timeout = null;
			      if (!immediate) func.apply(context, args);
			    };
			    var callNow = immediate && !timeout;
			    clearTimeout(timeout);
			    timeout = setTimeout(later, wait);
			    if (callNow) func.apply(context, args);
			  };
};

			var WIDGET; 
			var widget = function(n, liminf, limsup, callback) {
				this.n = n;
				this.down = svg.polyline(1,5, 10,0, 10,10);
				this.text = svg.text(25,5,n.toString()).attr(txtattr);
				this.up = svg.polyline(40,0, 40,10, 49,5);
				this.set = function(n) { 
					if(this.handled) return;
					this.handled = true;
					callback(n); 
					this.svg[1].node.innerHTML = n; 
					this.handled = false;
				}; 
				this.value = function() { return this.svg[1].node.innerHTML };
				this.downOnClick = function() { this.attr({fill:'#aaf'}); if(1 * WIDGET.value() > liminf) WIDGET.set(1 * WIDGET.value() - 1); this.animate({fill:'#000'},100); };
				this.upOnClick   = function() { this.attr({fill:'#aaf'}); if(1 * WIDGET.value() < limsup) WIDGET.set(1 * WIDGET.value() + 1); this.animate({fill:'#000'},100); };
				this.down.click(debounce(this.downOnClick, 10, false));
				this.up.click(debounce(this.upOnClick, 10, false));
				this.svg = svg.g(this.down, this.text, this.up);
			};


			var convb6 = function(n) {
				for(var i = 0; i < 4; i++) {
					if(img[i]) img[i].attr({opacity: '0.0'});
					if(dig[i]) dig[i].attr({opacity: '0.0'});
				}
				var i = 3;
				do {
					conv[i] = n % 6;
					var src = Snap.format(format,{ h: ((i % 2 === 1)? 'r' : 'l'), x: conv[i]});
					img[i] = svg.image(src,70 * i,0,90,90)
						.attr({opacity: '0.0'})
						.animate({opacity: '1.0'},50);
					dig[i] = svg.text(70 * i + 45, 100, conv[i].toString()).attr(txtattr);
					n = Math.floor(n / 6);
					i--;
				} while((n > 0) && (i >= 0));
			}; 

			WIDGET = new widget(num, 0, 99, convb6);
			WIDGET.svg.transform('T158 160S3');
			convb6(num);
	}"
	} -->

</div>
<aside data-markdown class="notes">
##Un sistema diferente
Todos conocemos el método tradicional de contar con los dedos. Como tenemos cinco dedos
en cada mano, podemos contar hasta diez. Pero también podemos utilizar un método diferente 
del tradicional, que resulta ser muy interesante. 

- Con este método, al llegar a 5 con la mano derecha, representamos el 6 **sólo con un dedo 
de la izquierda**. Los dedos de la mano derecha **vuelven a 0**, y seguimos contando
con la derecha. 
- Cada vez que se agotan los dedos de la mano derecha levantamos un nuevo dedo de la izquierda, y la derecha vuelve a 0.
- Cada dedo en alto de la mano izquierda significa que **se agotó la secuencia de la mano derecha una vez**.

###Preguntas
- ¿Hasta qué número se puede representar en este sistema, sólo con dos manos? 
- Si agregamos una tercera mano, de un amigo, ¿hasta qué número llegamos? 
- ¿Y cómo se representa el 36? ¿Y el 37?
- Y con cuatro manos, ¿hasta qué número llegamos? 
- Y, si el número no se puede representar con dos manos, ¿cómo es el procedimiento para saber qué dedos levantar?
</aside>
</section>

<section>
<h2>Un jueguito</h2>
<div class="snapsvg stretch" width="100" height="100">
        <svg id="bingame" viewBox="0 0 100 100" width="100%" height="100%"></svg>
        <script src="src/bingame.js"></script>
        <!-- { "initialize": "function(container, options) {
                Bingame('#bingame');
        }" } -->
</div>
</section>

<section class="preguntas" data-background="#3c53b5" data-background-transition="zoom" data-coursemod-shown="false">
<h1>Conclusiones</h1>
</section>




<section data-transition="slide-in slide-out">
<h1>¡Muchas gracias!</h1>
<h3>oso@fi.uncoma.edu.ar</h3>
<aside data-markdown class="notes">
</aside>
</section>
<!-- INCLUDE src/colaborando.trailer -->
